位运算总结
public static void main(String args[])
	{
		/*
		 * 本次学习的内容较为复杂
		 * 其中int的取值范围有2的32次方个数
		 * integer的maxvalue为2的31次方减1
		 * integer的minvalue为负的2的32次方
		 * 外加一个0，正好为2的32次方个数字
		 * 其中maxvalue最大值得来的方式为0111...111
		 * 其中minvalue最小值的来的方式为111...1110
		 * 在位运算中，二进制32位的各位数字
		 * 负数第1位必须为0
		 * 正数第32位必须为0
		 */
		/*
		 * 位运算符：
 		 * &    位与   x&y
 		 * |    位或  x|y
 		 * ~    位非  ~x
 		 * ^    位异或 ^x
 		 * >>   右移 x>>y
 		 * <<   左移 x<<y
 		 * >>>  无符号右移 x>>>y
         *
		 * 除了^为一元其余都为二元运算。
			
		 * 计算规则：
		 * &规定两对应位都为1则为1，否则为0
		 * | 规定两对应位其中有1则为1，否则0
		 * ^规定两对应位相同则为0，不同为1
		 * ~规定两对应位按位求补
		 * <<将二进制数按指定左移几位，移掉的省略，右边缺失的位，用0补齐
		 * >>将二进制数按指定右移几位，移掉的省略，左边缺失的位，（该数是正数）用0补齐，(该数是负数)用1补齐
		 * >>>将二进制数按指定右移几位，移掉的省略，左边缺失的位，用0补齐
		 */
		
		//负数的二进制需要该数正数按位取反+1
		System.out.println(2&1);//输出0，判断2为偶数
		System.out.println(3&1);//输出1，判断3为奇数
		System.out.println(~55+1);//~按要求求各位补位，即获得对应的负数二进制减一
		
		/*
		 * 位移运算
		 * 法则一：任何数左移（右移）32位的倍数等于该数本身。
		 * 法则二：在位移运算m<<n计算中，若n为正数，则实际移动的位数为n%32,若n为负数，则实际移动的位数为32+n%32，右移同理。
		 * 左移动1位，各位数计算都会乘以2；右移1位，各位数计算都会除以2。
		 * 所以x<<N，x乘以2的N次方；x>>N,x除以2的N次方；
		 * 
		 * 要移动的位数永远在<<或者>>的右边，左边是待移动数
		 */
		System.out.println(80>>2);
		System.out.println(5<<3);
		
		//以下的运算为每8位取出，11111111转化为十进制为255
		System.out.println(Integer.MAX_VALUE>>24&0xFF);
		System.out.println(Integer.MAX_VALUE>>16&0xFF);
		System.out.println(Integer.MAX_VALUE>>8&0xFF);
		System.out.println(Integer.MAX_VALUE&0xFF);
		System.out.println(Math.pow(2, 8));
		
		/*
		 * 如何交换两个数字的值
		 * a=a^b
		 * b=b^a=b^(a^b)=(b^b)^a=a  --> b=a
		 * a=a^b=(a^b)^b^(a^b)=(a^a)^(b^b)^b=b   --> a=b
		 * 这是以下式子的推导步骤
		 */
		int a=-1;
		int b=1;
		a^=b;
	    b^=a;
	    a^=b;
		System.out.println(a);
		System.out.println(b);
		
		/*
		 * 取绝对值，其中a为1，b为-1
		 * 首先b向
		 */
		b=a>>31;
	    System.out.println((b^a)-a);
	    
	    /*
	     * 取平均值
	     * x&y为x和y共有的部分
	     * x^y为x和y不相同的部分
	     * 将不相同的部分右移1位，相当于除二
	     */
	    int x=14;
	    int y=6;
	    System.out.println((x&y)+((x^y)>>1));
	}
